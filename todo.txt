
v1.6.4 Maybe...?
----------------
Move banner and service printing into reg startup methods - so they can easily be removed.
	
	@Contribute { serviceType=RegistryStartup# }
	internal static Void contributeRegistryStartup(OrderedConfig config) {
		config.remove("IocBanner")
		config.remove("IocServices")
	}

Split DependencyProviders out into seperate pod...
 - afIocXtra?
 - afIocAddOns?
 - afIocUtils? (tick)

Proxy default args
 - null for objs
 - false for bool (true if called checked)
 - 0 for int
 - use BeanUtils.defaultValue -> toCode
 - write about proxt limitations



Meh... can't be arsed
---------------------
MappedConfig  -> MapConfig  ? ConfigMap  ?
orderedConfig -> ListConfig ? ConfigList ?
 - What's the point? The orig names aren't that bad!
 - And *everyone* would need to update their code, even if they were deprecated! 
 
@Inject { optional = true }
 - why would you want to? And what of ctor args? 

service disambiguation via facets 
 - is just another dep pro: map of services keyed by type&facet

@Local (local to the module of the serviceDef in ctx stack) - use case? Annotate method?
 - just a convenience for serviceById
 - now that serviceIds are qualified, what's the point?



Just Plain Bad Ideas:
---------------------
Allow other @Inject facets
 - so BedSheet can define its own, for fewer pod import statements
 - but if afIoc and afBedSheet are imported at same time ~ conflict!
 
OrderConfig wildcards - e.g. "before: *" NO WILDCARDS
 - use placeholders instead

Create PerThreadService 
 - is just a registry.get()!

IocHelper.eagerLoadBuiltInServices
 - I mean, why?
 
On RegistryShutdown
 - kill ALL ActorPools: 
   - No, lets users be in charge of their own pools.  
 - clean up ALL threads:
   - Can't! Can only clean up up current thread.
